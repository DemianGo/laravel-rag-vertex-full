#!/usr/bin/env bash
set -Eeuo pipefail

# sempre rode no diretório do projeto (onde está o .env)
cd "$(dirname "$0")"

# lê variáveis do .env (somente as que precisamos), com defaults
read_env() {
  local key="$1"; local def="$2"
  local v
  v="$(sed -nE "s/^${key}=(.*)/\1/p" .env 2>/dev/null | tail -n1 | tr -d '"' | tr -d "'")" || true
  [ -n "${v:-}" ] && echo "$v" || echo "$def"
}

APP_HOST="$(read_env APP_HOST 127.0.0.1)"
APP_PORT="$(read_env APP_PORT 8001)"
PIDFILE=".serve.pid"
LOGFILE="/tmp/laravel-serve.log"

echo "[i] (re)start em ${APP_HOST}:${APP_PORT}"

# limpa caches p/ garantir que .env/config foram recarregados
php artisan optimize:clear >/dev/null || true

# se já houver algo escutando na porta, derruba (reload)
if ss -ltnp 2>/dev/null | grep -q ":${APP_PORT} "; then
  echo "[i] porta ${APP_PORT} ocupada — fazendo reload..."
  fuser -k "${APP_PORT}/tcp" 2>/dev/null || true
  sleep 0.5
fi

# mata por PID salvo, se existir
if [ -f "$PIDFILE" ]; then
  OLD_PID="$(cat "$PIDFILE" 2>/dev/null || true)"
  if [ -n "${OLD_PID:-}" ] && ps -p "$OLD_PID" >/dev/null 2>&1; then
    kill "$OLD_PID" 2>/dev/null || true
    sleep 0.5
  fi
fi

# sobe servidor em background
nohup php artisan serve --host="${APP_HOST}" --port="${APP_PORT}" > "${LOGFILE}" 2>&1 &
NEWPID=$!
echo "$NEWPID" > "$PIDFILE"

sleep 0.8
if ss -ltnp 2>/dev/null | grep -q ":${APP_PORT} "; then
  echo "[ok] rodando em http://${APP_HOST}:${APP_PORT}"
  echo "[log] tail -f ${LOGFILE}"
else
  echo "[erro] não subiu. Veja o log: ${LOGFILE}"
  exit 1
fi
