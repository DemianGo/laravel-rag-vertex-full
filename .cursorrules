=== LARAVEL RAG SYSTEM - ESTADO ATUAL (2025-10-13) ===

⚠️ REGRA CRÍTICA - LARAVEL vs FASTAPI (2025-10-14):
┌─────────────────────────────────────────────────────────────────────┐
│ LARAVEL APENAS PARA:                                                │
│ • Mostrar views (HTML/CSS/JS)                                       │
│ • Login e Registro (autenticação)                                   │
│ • Admin Panel                                                       │
└─────────────────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────────────────┐
│ FASTAPI PARA TUDO:                                                  │
│ • Upload de documentos (POST /api/rag/ingest)                       │
│ • Lista documentos (GET /api/docs/list)                             │
│ • Busca RAG (POST /api/rag/python-search)                           │
│ • Todas as APIs (em Python via FastAPI porta 8002)                 │
└─────────────────────────────────────────────────────────────────────┘

❌ NUNCA FAZER CHAMADAS AO LARAVEL PARA APIs - TODO SISTEMA É FASTAPI!

🔒 NUNCA MODIFICAR (Backend PHP - 100% funcional):
├── app/
│   ├── Http/Controllers/
│   │   ├── Controller.php ✅
│   │   ├── RagController.php ✅ (upload/ingest documentos + tenant isolation)
│   │   ├── RagAnswerController.php ✅ (busca RAG PHP)
│   │   ├── RagPythonController.php ✅ (busca RAG Python + validação tenant)
│   │   ├── VideoController.php ✅ (vídeos + transcrição + tenant isolation)
│   │   ├── Web/DocumentController.php ✅ (página /documents)
│   │   ├── Auth/AuthenticatedSessionController.php ✅ (login → /documents)
│   │   └── [22 controllers total]
│   ├── Models/
│   │   ├── User.php ✅ (Sanctum + API keys + planos)
│   │   ├── UserPlan.php ✅
│   │   ├── Document.php ✅
│   │   ├── Chunk.php ✅
│   │   └── RagFeedback.php ✅
│   └── Services/
│       ├── VideoProcessingService.php ✅
│       ├── ExcelStructuredService.php ✅
│       └── [15+ services]
├── routes/
│   ├── api.php ✅ (auth:sanctum em 26+ rotas)
│   ├── web.php ✅ (auth middleware)
│   └── auth.php ✅
├── config/ ✅
├── database/migrations/ ✅ (17 migrations)
├── composer.json ✅
└── .env ✅

🔒 NUNCA MODIFICAR (Python - Extração 100% funcional):
├── scripts/document_extraction/ ✅ (55 arquivos - incluindo OCR)
│   ├── main_extractor.py (integrado com OCR)
│   ├── extract.py (PDF)
│   ├── office_extractor.py (DOCX/XLSX/PPTX)
│   ├── text_extractor.py (TXT/CSV/RTF)
│   ├── web_extractor.py (HTML/XML)
│   ├── image_extractor_wrapper.py (OCR wrapper para PHP) ✅
│   ├── count_image_pages.py (contador de páginas para imagens) ✅
│   ├── extractors/image_extractor.py (OCR Tesseract completo) ✅
│   ├── advanced_ocr_processor.py (5 estratégias OCR) ✅
│   ├── google_vision_ocr.py (99% precisão) ✅
│   ├── pdf_tables_extractor.py (extração de tabelas) ✅
│   ├── excel_structured_extractor.py (JSON + agregações) ✅
│   └── quality/ (análise qualidade)
├── scripts/api/ ✅ (28 arquivos - FastAPI Enterprise)
│   ├── main.py
│   ├── routers/
│   ├── services/
│   └── models/
├── scripts/pdf_extraction/ ✅
└── scripts/video_processing/ ✅ (3 arquivos)
    ├── video_downloader.py (yt-dlp, 1000+ sites)
    ├── audio_extractor.py (FFmpeg)
    └── transcription_service.py (Gemini/Google/OpenAI)

🔒 NUNCA MODIFICAR (Python - RAG Search FINALIZADO):
└── scripts/rag_search/ ✅ (16 arquivos)
    ├── rag_search.py ✅ (modo document_full implementado)
    ├── config.py ✅
    ├── database.py ✅
    ├── embeddings_service.py (modelo: all-mpnet-base-v2, 768 dims)
    ├── vector_search.py ✅
    ├── llm_service.py ✅
    ├── mode_detector.py ✅
    ├── extractors.py ✅
    ├── formatters.py ✅
    ├── guards.py ✅
    ├── fts_search.py ✅
    ├── smart_router.py ✅ (inteligência automática)
    ├── pre_validator.py ✅ (validação preventiva)
    ├── fallback_handler.py ✅ (5 níveis de fallback)
    ├── question_suggester.py ✅ (perguntas inteligentes)
    ├── cache_layer.py ✅ (Redis/File, hit rate tracking)
    └── requirements.txt
    
    STATUS: 100% FUNCIONAL - PARIDADE COMPLETA COM PHP
    - Busca vetorial: OK
    - Busca FTS: OK (PostgreSQL + fallback)
    - LLM Gemini: OK (GOOGLE_GENAI_API_KEY)
    - Threshold: 0.05-0.45
    - Top-K: 5-8
    - Modos: auto/direct/summary/quote/list/table/document_full
    - Formatos: plain/markdown/html
    - Strictness: 0-3 (3 = sem LLM)
    - Smart Router: ✅ (decisão automática)
    - Cache Layer: ✅ (17.86% hit rate)
    - Tempo resposta: ~6s (< 1s com cache)

---

ARQUITETURA DO SISTEMA (ATUALIZADA):

┌─────────────────────────────────────────────────────────────────────┐
│ FRONTEND: Laravel Blade (Tailwind) + Bootstrap Console             │
├─────────────────────────────────────────────────────────────────────┤
│ • /documents → Página principal (Tailwind, upload, listagem)       │
│ • /rag-frontend/ → RAG Console standalone (Bootstrap, avançado)    │
│ • /dashboard, /chat, /plans → Páginas secundárias                  │
│ • Auth: Laravel Sanctum (multi-user, tenant isolation)             │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│ BACKEND: Laravel 12 + PHP 8.4                                       │
├─────────────────────────────────────────────────────────────────────┤
│ • Controllers: 22 arquivos (RAG, Video, Documents, etc)            │
│ • Middleware: ApiKeyAuth, CheckPlan, PlanMiddleware, auth:sanctum  │
│ • Services: 15+ serviços (RAG, Video, Embeddings, Excel, etc)      │
│ • Tenant Isolation: tenant_slug = "user_{user_id}" (automático)    │
│ • API Routes: 48+ endpoints (26+ protegidos por auth:sanctum)      │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│ PYTHON SCRIPTS: Processamento de documentos e RAG                  │
├─────────────────────────────────────────────────────────────────────┤
│ • document_extraction/ (55 arquivos - OCR, PDF, Office, Video)     │
│ • rag_search/ (16 arquivos - busca vetorial + LLM + inteligência)  │
│ • video_processing/ (3 arquivos - transcrição de vídeos)           │
│ • api/ (28 arquivos - FastAPI enterprise)                          │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│ DATABASE: PostgreSQL 14+                                            │
├─────────────────────────────────────────────────────────────────────┤
│ • users (auth + planos + API keys)                                 │
│ • documents (tenant_slug isolado, 253+ docs)                       │
│ • chunks (embeddings 768d, 299.451+ chunks)                        │
│ • rag_feedbacks (analytics, 👍👎)                                  │
└─────────────────────────────────────────────────────────────────────┘

---

STACK TÉCNICO:
- Laravel 12 + PHP 8.4
- Python 3.12
- PostgreSQL 14+
- sentence-transformers (all-mpnet-base-v2, 768d)
- Gemini AI (primary) / OpenAI (fallback)
- Laravel Sanctum (API authentication)
- Bootstrap 5 (RAG Console) + Tailwind CSS (Documents)

---

✅ SISTEMA MULTI-USUÁRIO (100% FUNCIONAL):

AUTENTICAÇÃO:
- ✅ Laravel Sanctum instalado e configurado
- ✅ Middleware auth:sanctum em 26+ rotas API
- ✅ Login/Registro funcionando
- ✅ Redirecionamento após login: /documents
- ✅ Email verification: DESABILITADO

ISOLAMENTO DE DADOS (TENANT):
- ✅ tenant_slug = "user_{user_id}" automático
- ✅ Todos controllers usam auth('sanctum')->user()
- ✅ Documentos isolados por tenant
- ✅ Vídeos isolados por tenant
- ✅ Chunks isolados por documento
- ✅ Validação de propriedade em RagPythonController

SISTEMA DE PLANOS:
- ✅ Free: 100 tokens, 1 documento
- ✅ Pro: 10.000 tokens, 50 documentos ($15/mês)
- ✅ Enterprise: Ilimitado ($30/mês)
- ✅ Middleware CheckPlan e PlanMiddleware
- ✅ Reset mensal automático

API KEYS POR USUÁRIO:
- ✅ Geração: rag_<56_hex_chars>
- ✅ Middleware ApiKeyAuth
- ✅ Endpoints: /api/user/api-key/*
- ✅ Comando: php artisan api-keys:generate --user-id=<id>
- ✅ Timestamps: api_key_created_at, api_key_last_used_at

---

✅ FRONTEND ATUAL (2025-10-13):

PÁGINA /documents (PRINCIPAL):
- ✅ Layout: Tailwind CSS + <x-app-layout>
- ✅ Upload Section: Formulário com validação
- ✅ Documents List: Tabela com docs do usuário
- ✅ Usage Display: Tokens e docs usados/limite
- ✅ Empty State: Mensagem quando vazio
- ✅ Help Section: Dicas de processamento
- ❌ REMOVIDO: Tab navigation (Documents/RAG Console)
- ❌ REMOVIDO: Iframe do RAG Console
- ❌ REMOVIDO: Parâmetro ?tab=rag-console

RAG CONSOLE /rag-frontend/ (STANDALONE):
- ✅ Layout: Bootstrap 5 (console-style)
- ✅ Acesso direto: http://localhost:8000/rag-frontend/
- ✅ Funcionalidades:
  - Ingest Tab: Upload (15 formatos + vídeos)
  - Python RAG Tab: Busca avançada
  - Metrics Tab: Estatísticas e feedbacks
  - Validação: file-validator.js
  - Bulk upload: 5 arquivos simultâneos
  - Limite: 500MB, 5.000 páginas
  - Transcrição vídeos: Modal completo
  - Smart Mode: Checkbox ativo
  - Cache: Badges visuais ⚡
- ❌ NÃO INTEGRADO: Não está em /documents

NAVEGAÇÃO:
- Menu: Dashboard | Chat | Documents | Plans
- Login redirect: /documents
- RAG Console: Acesso direto via URL

---

✅ FORMATOS SUPORTADOS (15 TOTAL):

DOCUMENTOS (9):
├── PDF (.pdf) ✅ - texto + tabelas + OCR avançado (99.5%)
├── DOCX/DOC (.docx, .doc) ✅ - texto + tabelas (95%)
├── XLSX/XLS (.xlsx, .xls) ✅ - estruturado + agregações (90%)
├── PPTX/PPT (.pptx, .ppt) ✅ - slides + notas (90%)
├── CSV (.csv) ✅ - chunking inteligente (90%)
├── TXT (.txt) ✅ - encoding detection (98%)
├── HTML (.html, .htm) ✅ - texto + tabelas (85%)
├── XML (.xml) ✅ - estruturado (75%)
└── RTF (.rtf) ✅ - rich text (75%)

IMAGENS COM OCR (6):
├── PNG, JPG/JPEG, GIF, BMP, TIFF, WebP ✅
├── Tesseract OCR: 92% precisão
└── Google Cloud Vision: 99% precisão (opcional)

VÍDEOS (1000+ SITES):
├── YouTube, Vimeo, Dailymotion, Facebook, Instagram, TikTok, etc ✅
├── Limite: 60 minutos (1 hora)
├── Transcrição: Gemini 2.5 Flash/Pro + Google Speech + OpenAI Whisper
└── Precisão: 90%+

COBERTURA MÉDIA: 93%

---

✅ FEATURES AVANÇADAS IMPLEMENTADAS:

SMART ROUTER ✅:
- Análise de especificidade da query
- Decisão automática de estratégia
- Otimização de parâmetros
- Metadados de decisão

PRE-VALIDATOR + FALLBACK ✅:
- Validação preventiva
- 5 níveis de fallback
- Expansão automática de queries
- Simplificação para keywords

CACHE LAYER ✅:
- Redis/File cache
- TTL: 1 hora (configurável)
- Hit rate tracking: 17.86%
- Comandos: stats, clear

QUESTION SUGGESTER ✅:
- 6 tipos de documento
- 8 perguntas por tipo
- Salvas em documents.metadata
- Carregam ao selecionar documento

FEEDBACK SYSTEM ✅:
- Botões 👍👎 após respostas
- Dashboard de analytics
- Top queries e documentos
- Tendência diária

EXCEL ESTRUTURADO ✅:
- Agregações precisas (SUM, AVG, COUNT, MAX, MIN)
- Chunking inteligente (1 linha = 1 chunk)
- API: /api/excel/query, /api/excel/{id}/structure

VIDEO PROCESSING ✅:
- Upload local + URL (1000+ sites)
- Limite: 60 minutos
- Transcrição: 3 serviços (auto-fallback)
- Modal de transcrição completa
- UTF-8 cleaning automático

---

🎯 API ENDPOINTS (48+ TOTAL):

ROTAS WEB (AUTENTICADAS):
- GET /dashboard → DashboardController
- GET /chat → ChatController
- GET /documents → DocumentController (página principal)
- POST /documents/upload → Upload de documentos
- GET /documents/{id} → Visualizar documento
- GET /plans → Planos e upgrades
- GET /profile → Perfil do usuário

ROTAS API (PROTEGIDAS POR auth:sanctum):
RAG Operations:
- POST /api/rag/ingest → Ingestão de documentos
- POST /api/rag/query → Busca RAG PHP
- POST /api/rag/python-search → Busca RAG Python
- GET /api/docs/list → Listar documentos do tenant
- GET /api/docs/{id} → Ver documento
- GET /api/docs/{id}/chunks → Ver chunks

Video Processing:
- POST /api/video/ingest → Upload/URL de vídeo
- POST /api/video/info → Info do vídeo

Excel Structured:
- POST /api/excel/query → Query com agregações
- GET /api/excel/{id}/structure → Metadados

Feedback & Analytics:
- POST /api/rag/feedback → Enviar feedback
- GET /api/rag/feedback/stats → Estatísticas
- GET /api/rag/feedback/recent → Feedbacks recentes

API Keys:
- GET /api/user/api-key → Ver API key
- POST /api/user/api-key/generate → Gerar nova
- POST /api/user/api-key/regenerate → Regenerar
- DELETE /api/user/api-key/revoke → Revogar

---

📊 BANCO DE DADOS ATUAL:

TABELAS PRINCIPAIS:
- users: id, name, email, password, plan, tokens_used, tokens_limit, documents_used, documents_limit, api_key, api_key_created_at, api_key_last_used_at
- documents: id, title, source, uri, tenant_slug, metadata (JSON), created_at, updated_at
- chunks: id, document_id, content, chunk_index, embedding (vector 768d), metadata (JSON)
- rag_feedbacks: id, query, document_id, rating (1 ou -1), metadata (JSON)

DADOS ATUAIS:
- Documentos: 253+
- Chunks: 299.451+ (com embeddings)
- Usuários: 1+
- Tabelas: 10+ principais

---

⚙️ CONFIGURAÇÕES (.env):

# Database
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=laravel_rag
DB_USERNAME=postgres
DB_PASSWORD=postgres

# AI Services
GOOGLE_GENAI_API_KEY=xxx (Gemini - transcrição + LLM)
GOOGLE_APPLICATION_CREDENTIALS=/path/to/credentials.json (Google Speech + Vision)
OPENAI_API_KEY=xxx (Whisper fallback)

# Laravel
APP_URL=http://localhost:8000
SESSION_DRIVER=database

---

⚠️ PROBLEMAS CONHECIDOS (2):

1. batch_embeddings.py: Import error (baixo impacto)
2. Google Cloud Token: Pode expirar (resolve com dev-start.sh)

---

📝 COMANDOS ÚTEIS:

# Servidor
php artisan serve

# Cache
php artisan cache:clear
php artisan view:clear
php artisan route:clear

# Migrations
php artisan migrate

# Testes
php artisan test

# API Keys
php artisan api-keys:generate --user-id=1

# Cache Stats (Python)
python3 scripts/rag_search/cache_layer.py --action stats
python3 scripts/rag_search/cache_layer.py --action clear

# Perguntas Sugeridas
python3 scripts/rag_search/question_suggester.py --document-id ID

---

📊 STATUS GERAL: ✅ 95% FUNCIONAL - PRONTO PARA PRODUÇÃO

COMPONENTES:
- Auth Multi-User: ✅ 100%
- Sistema de Planos: ✅ 100%
- API Keys: ✅ 100%
- Upload Documentos: ✅ 100% (15 formatos)
- RAG Search: ✅ 100% (PHP + Python)
- Vídeos: ✅ 100% (1000+ sites)
- Smart Features: ✅ 100% (Router, Cache, Suggester)
- Frontend /documents: ✅ 100% (Tailwind, simplificado)
- RAG Console: ✅ 100% (Bootstrap, standalone)
- Integração Console: ❌ 0% (foi removida)

---

ÚLTIMA ATUALIZAÇÃO: 2025-10-13 00:15 UTC
PRÓXIMA REVISÃO: Após decisão sobre integração do RAG Console

---

REGRAS DE TRABALHO:
- Envie apenas PATCH mínimo (unified diff). Nunca arquivo inteiro.
- Não faça varredura global. Leia só arquivos/linhas solicitados.
- Não mude env/deps/config sem solicitação explícita.
- Mantenha tenant isolation em todos controllers (auth('sanctum')->user())
- Mantenha auth:sanctum em todas rotas API sensíveis
- Não remova funcionalidades existentes sem aprovação
- Aguarde indicação de arquivos/linhas; responda sempre só com o PATCH.
